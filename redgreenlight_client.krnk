# Client Script runs only on the client
# KrunkScript Copyright (C) Yendis Entertainment Pty Ltd
# 
# Add custom actions here

# ======================================================
# CLIENT KNOBS
num MS_DURATION_SONG = 3000; # change if the soundfile length is changed
num MS_DURATION_BOTSCAN = 1000; # change if the soundfile length is changed
num MSDURATION_DROP = 1000; num MS_DURATIONDEATH = 3000;
# ======================================================


# Runs when the game starts
bool redlight = false;
num tdurationlight = 0;
num clocktime = 0;
bool inrange = false;
bool inredgreenroom = true;
obj[] assetList  = obj[];
str winner = "";

action updateDeathAnim(num tnow, num delta) {
    for (num i=0; i < lengthOf assetList; i++) {
        obj asset = (obj) assetList[i].asset;
        if ((tnow - (num)assetList[i].tspawned) > (num)assetList[i].tdurationanim) {
            asset.delete();
            remove  assetList[i];
        } else if ((tnow - (num)assetList[i].tspawned) < MSDURATION_DROP) {
            (num) asset.position.x += -1/100 * delta;
            asset.position.y = (num) assetList[i].ystartpos + 7*Math.sin((tnow - (num) assetList[i].tspawned)/MSDURATION_DROP * Math.PI);
        }
    }
}

str action timetoStr(num mstime) {
    num min = Math.floor(mstime / 1000 / 60);
    num sec = Math.floor(mstime / 1000);
    num ms_remain = Math.round((mstime % 1000)/100);

    min = min >= 0 ? min : 0;
    sec = sec >= 0 ? sec : 0;
    ms_remain = ms_remain >= 0 ? ms_remain : 0;

    str minstr = (min >= 10 ? toStr min : "0" + toStr min);
    str secstr = (sec >= 10 ? toStr sec : "0" + toStr sec);
    

    return minstr + ":" + secstr + "." + toStr ms_remain;
}
public action start() {
    clocktime = 0;
    winner = "";

    for (num i=0; i < lengthOf assetList; i++) {
        assetList[i].delete();
        remove assetList[i];
    }
}


# Runs every game tick
public action update(num delta) {
    if (lengthOf assetList > 0) {
        updateDeathAnim(GAME.TIME.now(), delta);
    }
    if (clocktime > 0) {
        clocktime -= delta;
    }

}

# Add rendering logic in here
num height = 0;
public action render(num delta) {
    obj size = GAME.OVERLAY.getSize();
    if ((num) size.height != height) {
        height = (num) size.height;
        GAME.log(toStr height);
    }
    
	num xmid = ((num) size.width)/2;
	num ymid = ((num) size.height)/2;

    
    if (inrange) {
        if (redlight)     {
            GAME.OVERLAY.drawText("RED LIGHT", (num) size.width*1/32, (num) size.height*1/4, 0, 20, "left", "#FF0000", 1);
        } else {
            GAME.OVERLAY.drawText("GREEN LIGHT", (num) size.width*1/32, (num) size.height*1/4, 0, 20, "left", "#00FF00", 1);
        }
    }

    # timer
    GAME.OVERLAY.drawRect((num)size.width*7/16, (num) size.height*1/32, (num)size.width/8,(num)size.height/16, "left", "#000000", 0.3);
    GAME.OVERLAY.drawText(timetoStr(clocktime), xmid, (num) size.height*9/128, 0, 32*(num)size.height / 1080, "center", "#FFFFFF", 1);
    
    # winner display message
    if (!!winner) {
        GAME.OVERLAY.drawRect((num) size.width*5/16, (num) size.height*5/16, (num)size.width*3/8,(num)size.height*5/16, "left", "#000000", 0.3);
        GAME.OVERLAY.drawText("WINNER: ", xmid, (num) size.height*7/16, 0, 72*(num)size.height/1080*(num)size.width/1920, "center", "#FFFFFF", 1);
        GAME.OVERLAY.drawText(winner, xmid, (num) size.height*9/16, 0, 100*(num)size.height/1080*(num)size.width/1920, "center", "#e9417f", 1);
    }
}

# Player spawns in
public action onPlayerSpawn(str id) {

}

# Player update
public action onPlayerUpdate(str id, num delta, static obj inputs) {

}

# User pressed a key
public action onKeyPress(str key, num code) {

}

# User released a key
public action onKeyUp(str key, num code) {

}

# User held a key
public action onKeyHeld(str key, num code) {

}

# User clicked on screen
public action onMouseClick(num button, num x, num y) {

}

# User released clicked on screen
public action onMouseUp(num button, num x, num y) {

}

# User scrolled on screen
public action onMouseScroll(num dir) {

}

# User clicked a DIV (ID)
public action onDIVClicked(str id) {

}

# Client receives network message
public action onNetworkMessage(str id, obj data) {
    GAME.log(id);
    if ((id == "lightstatus") && (inredgreenroom == true)) {
        redlight = (bool) data.redlight;
        tdurationlight = (num) data.tdurationlight;
        if (!redlight) {
            obj sound = GAME.SOUND.play2D(31321,1,((MS_DURATION_SONG+100)/tdurationlight),false); # hardcoded singing to 3seconds
        } else{
            obj sound = GAME.SOUND.play2D(31409,1,1,false); # hardcoded botscan to 1second
        }
    } else if (id == "inrange") {
        inrange = true;
        inredgreenroom = true;
    } else if (id == "outrange") {
        inrange = false;
    } else if (id == "shoot") {
        obj sound = GAME.SOUND.play2D(31325,1,1,false); 
    } else if (id == "leftredgreenroom") {
        GAME.log("left redgreenroom!");
        inredgreenroom = false;
    } else if (id == "dead") {
        obj model = GAME.SCENE.addAsset("31207g",(num)data.x,(num)data.y,(num)data.z,8);
        model.rotation.x = -90;
        model.rotation.z = 90;
        model.playAnim("Jump");
        obj asset = {asset:model, tspawned: GAME.TIME.now(), tdurationanim: MS_DURATIONDEATH,ystartpos:(num)model.position.y};
        addTo assetList asset;
    } else if (id == "clocktime") {
        clocktime = (num) data.clocktime;
    } else if (id == "winner") { 
        winner = (str) data.winner;
        GAME.SOUND.play2D(31410,1,1,false); # winning sound
    }
}